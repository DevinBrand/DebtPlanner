import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable'
import * as XLSX from 'xlsx'
import { UserData, DebtSnowballResult } from '../types'
import { generatePaymentSchedule } from './debtCalculator'
import { formatCurrency } from './helpers'

export async function generatePaymentPlanPDF(userData: UserData, results: DebtSnowballResult) {
  const doc = new jsPDF()
  const paymentSchedule = generatePaymentSchedule(results)
  
  // Header
  doc.setFontSize(20)
  doc.setTextColor(40, 40, 40)
  doc.text('Debt Freedom Payment Plan', 20, 30)
  
  doc.setFontSize(12)
  doc.setTextColor(100, 100, 100)
  doc.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 40)
  
  // Summary section
  doc.setFontSize(14)
  doc.setTextColor(40, 40, 40)
  doc.text('Summary', 20, 60)
  
  const summaryData = [
    ['Total Debt Amount', formatCurrency(userData.debts.reduce((sum, debt) => sum + debt.balance, 0))],
    ['Monthly Income', formatCurrency(userData.monthlyIncome)],
    ['Total Budget Expenses', formatCurrency(userData.budgetCategories.reduce((sum, cat) => sum + cat.amount, 0))],
    ['Available for Extra Payments', formatCurrency(userData.monthlyIncome - userData.budgetCategories.reduce((sum, cat) => sum + cat.amount, 0) - userData.debts.reduce((sum, debt) => sum + debt.minimumPayment, 0))],
    ['Months to Freedom', results.monthsToPayoff.toString()],
    ['Interest Saved', formatCurrency(results.totalInterestSaved)]
  ]
  
  autoTable(doc, {
    head: [['Metric', 'Value']],
    body: summaryData,
    startY: 70,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    styles: { fontSize: 10 }
  })
  
  // Debt payoff order
  doc.addPage()
  doc.setFontSize(14)
  doc.text('Debt Payoff Order (Priority & Snowball Strategy)', 20, 30)
  
  const debtOrderData = results.payoffOrder.map((debt, index) => {
    const payoffMonth = results.paymentPlans.find(plan => 
      plan.debt.id === debt.id && plan.isPayoffMonth
    )?.month || 'TBD'
    
    return [
      (index + 1).toString(),
      debt.name,
      formatCurrency(debt.balance),
      `${debt.interestRate}%`,
      debt.priority,
      payoffMonth.toString()
    ]
  })
  
  autoTable(doc, {
    head: [['Order', 'Debt Name', 'Balance', 'Interest Rate', 'Priority', 'Payoff Month']],
    body: debtOrderData,
    startY: 40,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    styles: { fontSize: 9 }
  })
  
  // Payment schedule
  doc.addPage()
  doc.setFontSize(14)
  doc.text('Monthly Payment Schedule', 20, 30)
  
  const scheduleData = paymentSchedule.map(month => [
    month.month.toString(),
    formatCurrency(month.totalPayment),
    formatCurrency(month.totalPrincipal),
    formatCurrency(month.totalInterest),
    formatCurrency(month.totalRemaining)
  ])
  
  autoTable(doc, {
    head: [['Month', 'Total Payment', 'Principal', 'Interest', 'Remaining Balance']],
    body: scheduleData,
    startY: 40,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    styles: { fontSize: 8 },
    columnStyles: {
      0: { cellWidth: 20 },
      1: { cellWidth: 35 },
      2: { cellWidth: 35 },
      3: { cellWidth: 35 },
      4: { cellWidth: 40 }
    }
  })
  
  // Footer
  const pageCount = (doc as any).internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.setTextColor(150, 150, 150)
    doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 30, doc.internal.pageSize.height - 10)
    doc.text('Generated by Debt Planner', 20, doc.internal.pageSize.height - 10)
  }
  
  doc.save('debt-payment-plan.pdf')
}

export async function generateExcelTracker(userData: UserData, results: DebtSnowballResult) {
  const wb = XLSX.utils.book_new()
  const paymentSchedule = generatePaymentSchedule(results)
  
  // Summary worksheet
  const summaryData = [
    ['Debt Freedom Payment Tracker', '', '', ''],
    ['Generated on:', new Date().toLocaleDateString(), '', ''],
    ['', '', '', ''],
    ['Summary', '', '', ''],
    ['Total Debt Amount', userData.debts.reduce((sum, debt) => sum + debt.balance, 0), '', ''],
    ['Monthly Income', userData.monthlyIncome, '', ''],
    ['Total Budget Expenses', userData.budgetCategories.reduce((sum, cat) => sum + cat.amount, 0), '', ''],
    ['Months to Freedom', results.monthsToPayoff, '', ''],
    ['Interest Saved', results.totalInterestSaved, '', ''],
    ['', '', '', ''],
    ['Instructions:', '', '', ''],
    ['1. Use the Payment Schedule tab to track actual payments', '', '', ''],
    ['2. Update the Actual Payment column each month', '', '', ''],
    ['3. Track extra payments in the Extra Payment column', '', '', ''],
    ['4. Watch your progress in the Balance Remaining column', '', '', ''],
  ]
  
  const summaryWS = XLSX.utils.aoa_to_sheet(summaryData)
  XLSX.utils.book_append_sheet(wb, summaryWS, 'Summary')
  
  // Payment schedule worksheet
  const scheduleHeaders = [
    'Month',
    'Planned Payment',
    'Actual Payment',
    'Extra Payment',
    'Planned Principal',
    'Planned Interest',
    'Planned Balance',
    'Actual Balance',
    'Notes'
  ]
  
  const scheduleData = [
    scheduleHeaders,
    ...paymentSchedule.map(month => [
      month.month,
      month.totalPayment,
      '', // Actual payment (to be filled by user)
      '', // Extra payment (to be filled by user)
      month.totalPrincipal,
      month.totalInterest,
      month.totalRemaining,
      '', // Actual balance (to be filled by user)
      '' // Notes
    ])
  ]
  
  const scheduleWS = XLSX.utils.aoa_to_sheet(scheduleData)
  XLSX.utils.book_append_sheet(wb, scheduleWS, 'Payment Schedule')
  
  // Debt details worksheet
  const debtHeaders = ['Debt Name', 'Original Balance', 'Current Balance', 'Minimum Payment', 'Interest Rate', 'Type', 'Priority', 'Status']
  const debtData = [
    debtHeaders,
    ...userData.debts.map(debt => [
      debt.name,
      debt.balance,
      debt.balance, // Current balance (to be updated)
      debt.minimumPayment,
      debt.interestRate,
      debt.type,
      debt.priority,
      'Active'
    ])
  ]
  
  const debtWS = XLSX.utils.aoa_to_sheet(debtData)
  XLSX.utils.book_append_sheet(wb, debtWS, 'Debt Details')
  
  // Budget tracking worksheet
  const budgetHeaders = ['Category', 'Planned Amount', 'Actual Amount', 'Difference', 'Type']
  const budgetData = [
    budgetHeaders,
    ...userData.budgetCategories.map(category => [
      category.name,
      category.amount,
      '', // Actual amount (to be filled)
      '', // Difference (formula)
      category.type
    ])
  ]
  
  const budgetWS = XLSX.utils.aoa_to_sheet(budgetData)
  XLSX.utils.book_append_sheet(wb, budgetWS, 'Budget Tracker')
  
  XLSX.writeFile(wb, 'debt-payment-tracker.xlsx')
}

export async function generateProcessTracker(_userData: UserData, results: DebtSnowballResult) {
  const wb = XLSX.utils.book_new()
  
  // Monthly habits tracker
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  const habits = [
    'Made all minimum payments',
    'Made extra debt payment',
    'Tracked all expenses',
    'Reviewed budget',
    'Avoided new debt',
    'Celebrated progress',
    'Reviewed goals',
    'Found extra income',
    'Cut unnecessary expense',
    'Stayed motivated'
  ]
  
  const habitData = [
    ['Debt Freedom Habit Tracker', ...months],
    ['', ''],
    ...habits.map(habit => [habit, ...months.map(() => '')])
  ]
  
  const habitWS = XLSX.utils.aoa_to_sheet(habitData)
  XLSX.utils.book_append_sheet(wb, habitWS, 'Monthly Habits')
  
  // Motivation journal
  const journalData = [
    ['Month', 'Wins & Victories', 'Challenges Faced', 'Lessons Learned', 'Next Month Goals'],
    ...Array.from({ length: results.monthsToPayoff }, (_, i) => [
      `Month ${i + 1}`,
      '', // Wins
      '', // Challenges
      '', // Lessons
      ''  // Goals
    ])
  ]
  
  const journalWS = XLSX.utils.aoa_to_sheet(journalData)
  XLSX.utils.book_append_sheet(wb, journalWS, 'Motivation Journal')
  
  // Milestone tracker
  const milestoneData = [
    ['Milestone', 'Target Date', 'Actual Date', 'Celebration Plan', 'Completed'],
    ['First debt paid off', '', '', '', ''],
    ['25% of debt eliminated', '', '', '', ''],
    ['50% of debt eliminated', '', '', '', ''],
    ['75% of debt eliminated', '', '', '', ''],
    ['All debts paid off!', '', '', '', ''],
    ['Emergency fund started', '', '', '', ''],
    ['Emergency fund complete', '', '', '', '']
  ]
  
  const milestoneWS = XLSX.utils.aoa_to_sheet(milestoneData)
  XLSX.utils.book_append_sheet(wb, milestoneWS, 'Milestones')
  
  // Weekly check-in
  const weeklyData = [
    ['Week Of', 'Budget Status', 'Debt Payments Made', 'Unexpected Expenses', 'Wins This Week', 'Focus for Next Week'],
    ...Array.from({ length: Math.ceil(results.monthsToPayoff * 4.33) }, () => [
      '', // Week of
      '', // Budget status
      '', // Debt payments
      '', // Unexpected expenses
      '', // Wins
      ''  // Focus
    ])
  ]
  
  const weeklyWS = XLSX.utils.aoa_to_sheet(weeklyData)
  XLSX.utils.book_append_sheet(wb, weeklyWS, 'Weekly Check-in')
  
  XLSX.writeFile(wb, 'debt-freedom-process-tracker.xlsx')
}